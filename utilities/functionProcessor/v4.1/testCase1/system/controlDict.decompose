/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                |
| \\      /  F ield         |                                                |
|  \\    /   O peration     |                                                |
|   \\  /    A nd           |                                                |
|    \\/     M anipulation  |                                                |
\*---------------------------------------------------------------------------*/

FoamFile
{
    version   2.0;
    format    ascii;
    class     dictionary;
    location  "system";
    object    meshDict;
}

// ************************************************************************* //

applicationClass    ;

startFrom           latestTime;

startTime           0;

stopAt              endTime;

endTime             500;

deltaT              1;

writeControl        timeStep;

writeInterval       100;

cycleWrite          0;

writeFormat         ascii;

writeCompression    uncompressed;

timeFormat          general;

timePrecision       6;

runTimeModifiable   yes;

nCorrectors         2;

nNonOrthogonalCorrectors 0;

functions
{
    processor
    {
        libs ("libutilityFunctionObjects.so");
        type  coded;
        name  processor;

        codeEnd
        #{
            Info << "coded Function Start" << endl;

            volScalarField& dist = const_cast<volScalarField&>
            (mesh().lookupObject<volScalarField>("cellDist"));

            forAll(dist, i)
            {
                const vector& C = mesh().C()[i];
                const scalar& x = C[0];
                const scalar& y = C[1];
                const scalar& z = C[2];

                scalar& d = dist[i];
                const scalar r = 0.0254;
                const scalar RR = 0.1;

                d = 4;
                if(x<0.3)
                {
                  d=0;
                }
                else if(x<0.5)
                {
                  if(Foam::sqr(y)+Foam::sqr(z)<Foam::sqr(0.02))
                  {
                    d=1;
                  }
                  else
                  {
                    d=2;
                  }
                }
                else if(z<0.1)
                {
                  if
                  ( // equation of torus
                    Foam::sqr
                    (
                      Foam::sqrt(
                        Foam::sqr(x-0.5)+Foam::sqr(z-0.1)
                      ) - RR
                    )
                    + Foam::sqr(y) < Foam::sqr(0.02)
                  ) {
                    d = 1;
                  }
                  else
                  {
                    d = 2;
                  }
                }
                else if(z < 0.2)
                {
                  if(Foam::sqr(x-0.6)+Foam::sqr(y)<Foam::sqr(0.02))
                  {
                    d=1;
                  }
                  else
                  {
                    d=2;
                  }
                }
                else if(x<0.7)
                {
                  if
                  ( // equation of torus
                    Foam::sqr
                    (
                      Foam::sqrt(
                        Foam::sqr(x-0.7)+Foam::sqr(z-0.2)
                      ) - RR
                    )
                    + Foam::sqr(y) < Foam::sqr(0.02)
                  ) {
                    d = 1;
                  }
                  else
                  {
                    d = 2;
                  }
                }
                else
                {
                  d = 3;
                }
            }
        #};
    }
}

// ************************************************************************* //
