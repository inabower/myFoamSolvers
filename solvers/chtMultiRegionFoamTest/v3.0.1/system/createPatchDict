/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  3.0.1                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      createPatchDict;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// This application/dictionary controls:
// - optional: create new patches from boundary faces (either given as
//   a set of patches or as a faceSet)
// - always: order faces on coupled patches such that they are opposite. This
//   is done for all coupled faces, not just for any patches created.
// - optional: synchronise points on coupled patches.

// 1. Create cyclic:
// - specify where the faces should come from
// - specify the type of cyclic. If a rotational specify the rotationAxis
//   and centre to make matching easier
// - always create both halves in one invocation with correct 'neighbourPatch'
//   setting.
// - optionally pointSync true to guarantee points to line up.

// 2. Correct incorrect cyclic:
// This will usually fail upon loading:
//  "face 0 area does not match neighbour 2 by 0.0100005%"
//  " -- possible face ordering problem."
// - in polyMesh/boundary file:
//      - loosen matchTolerance of all cyclics to get case to load
//      - or change patch type from 'cyclic' to 'patch'
//        and regenerate cyclic as above


// Do a synchronisation of coupled points after creation of any patches.
// Note: this does not work with points that are on multiple coupled patches
//       with transformations (i.e. cyclics).
pointSync false;

// Patches to create.
patches
(
    //first
    {
        name minXfirst;
        patchInfo
        {
            type empty;
        }
        constructFrom set;
        set minXfirstFaceSet;
    }
    {
        name maxXfirst;
        patchInfo
        {
            type empty;
        }
        constructFrom set;
        set maxXfirstFaceSet;
    }
    {
        name minZfirst;
        patchInfo
        {
            type patch;
        }
        constructFrom set;
        set minZfirstFaceSet;
    }
    {
        name maxZfirst;
        patchInfo
        {
            type patch;
        }
        constructFrom set;
        set maxZfirstFaceSet;
    }
    //second
    {
        name minXsecond;
        patchInfo
        {
            type empty;
        }
        constructFrom set;
        set minXsecondFaceSet;
    }
    {
        name maxXsecond;
        patchInfo
        {
            type empty;
        }
        constructFrom set;
        set maxXsecondFaceSet;
    }
    {
        name minZsecond;
        patchInfo
        {
            type patch;
        }
        constructFrom set;
        set minZsecondFaceSet;
    }
    {
        name maxZsecond;
        patchInfo
        {
            type patch;
        }
        constructFrom set;
        set maxZsecondFaceSet;
    }
    //third
    {
        name minXthird;
        patchInfo
        {
            type empty;
        }
        constructFrom set;
        set minXthirdFaceSet;
    }
    {
        name maxXthird;
        patchInfo
        {
            type empty;
        }
        constructFrom set;
        set maxXthirdFaceSet;
    }
    {
        name minZthird;
        patchInfo
        {
            type patch;
        }
        constructFrom set;
        set minZthirdFaceSet;
    }
    {
        name maxZthird;
        patchInfo
        {
            type patch;
        }
        constructFrom set;
        set maxZthirdFaceSet;
    }
    //fourth
    {
        name minXfourth;
        patchInfo
        {
            type empty;
        }
        constructFrom set;
        set minXfourthFaceSet;
    }
    {
        name maxXfourth;
        patchInfo
        {
            type empty;
        }
        constructFrom set;
        set maxXfourthFaceSet;
    }
    {
        name minZfourth;
        patchInfo
        {
            type patch;
        }
        constructFrom set;
        set minZfourthFaceSet;
    }
    {
        name maxZfourth;
        patchInfo
        {
            type patch;
        }
        constructFrom set;
        set maxZfourthFaceSet;
    }
    //fifth
    {
        name minXfifth;
        patchInfo
        {
            type empty;
        }
        constructFrom set;
        set minXfifthFaceSet;
    }
    {
        name maxXfifth;
        patchInfo
        {
            type empty;
        }
        constructFrom set;
        set maxXfifthFaceSet;
    }
    {
        name minZfifth;
        patchInfo
        {
            type patch;
        }
        constructFrom set;
        set minZfifthFaceSet;
    }
    {
        name maxZfifth;
        patchInfo
        {
            type patch;
        }
        constructFrom set;
        set maxZfifthFaceSet;
    }



);

// ************************************************************************* //
